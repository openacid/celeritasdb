// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `instance.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct InstanceID {
    // message fields
    pub replica_id: i64,
    pub idx: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstanceID {
    fn default() -> &'a InstanceID {
        <InstanceID as ::protobuf::Message>::default_instance()
    }
}

impl InstanceID {
    pub fn new() -> InstanceID {
        ::std::default::Default::default()
    }

    // int64 replica_id = 1;


    pub fn get_replica_id(&self) -> i64 {
        self.replica_id
    }
    pub fn clear_replica_id(&mut self) {
        self.replica_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_replica_id(&mut self, v: i64) {
        self.replica_id = v;
    }

    // int64 idx = 2;


    pub fn get_idx(&self) -> i64 {
        self.idx
    }
    pub fn clear_idx(&mut self) {
        self.idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_idx(&mut self, v: i64) {
        self.idx = v;
    }
}

impl ::protobuf::Message for InstanceID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.replica_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.idx = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.replica_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.replica_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.idx != 0 {
            my_size += ::protobuf::rt::value_size(2, self.idx, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.replica_id != 0 {
            os.write_int64(1, self.replica_id)?;
        }
        if self.idx != 0 {
            os.write_int64(2, self.idx)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceID {
        InstanceID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "replica_id",
                    |m: &InstanceID| { &m.replica_id },
                    |m: &mut InstanceID| { &mut m.replica_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "idx",
                    |m: &InstanceID| { &m.idx },
                    |m: &mut InstanceID| { &mut m.idx },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstanceID>(
                    "InstanceID",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstanceID {
        static mut instance: ::protobuf::lazy::Lazy<InstanceID> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstanceID,
        };
        unsafe {
            instance.get(InstanceID::new)
        }
    }
}

impl ::protobuf::Clear for InstanceID {
    fn clear(&mut self) {
        self.replica_id = 0;
        self.idx = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceID {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BallotNum {
    // message fields
    pub epoch: i32,
    pub num: i32,
    pub replica_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BallotNum {
    fn default() -> &'a BallotNum {
        <BallotNum as ::protobuf::Message>::default_instance()
    }
}

impl BallotNum {
    pub fn new() -> BallotNum {
        ::std::default::Default::default()
    }

    // int32 epoch = 1;


    pub fn get_epoch(&self) -> i32 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: i32) {
        self.epoch = v;
    }

    // int32 num = 2;


    pub fn get_num(&self) -> i32 {
        self.num
    }
    pub fn clear_num(&mut self) {
        self.num = 0;
    }

    // Param is passed by value, moved
    pub fn set_num(&mut self, v: i32) {
        self.num = v;
    }

    // int64 replica_id = 3;


    pub fn get_replica_id(&self) -> i64 {
        self.replica_id
    }
    pub fn clear_replica_id(&mut self) {
        self.replica_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_replica_id(&mut self, v: i64) {
        self.replica_id = v;
    }
}

impl ::protobuf::Message for BallotNum {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.epoch = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.replica_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.replica_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.replica_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_int32(1, self.epoch)?;
        }
        if self.num != 0 {
            os.write_int32(2, self.num)?;
        }
        if self.replica_id != 0 {
            os.write_int64(3, self.replica_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BallotNum {
        BallotNum::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "epoch",
                    |m: &BallotNum| { &m.epoch },
                    |m: &mut BallotNum| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "num",
                    |m: &BallotNum| { &m.num },
                    |m: &mut BallotNum| { &mut m.num },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "replica_id",
                    |m: &BallotNum| { &m.replica_id },
                    |m: &mut BallotNum| { &mut m.replica_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BallotNum>(
                    "BallotNum",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BallotNum {
        static mut instance: ::protobuf::lazy::Lazy<BallotNum> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BallotNum,
        };
        unsafe {
            instance.get(BallotNum::new)
        }
    }
}

impl ::protobuf::Clear for BallotNum {
    fn clear(&mut self) {
        self.epoch = 0;
        self.num = 0;
        self.replica_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BallotNum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BallotNum {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstIDs {
    // message fields
    pub ids: ::protobuf::RepeatedField<InstanceID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstIDs {
    fn default() -> &'a InstIDs {
        <InstIDs as ::protobuf::Message>::default_instance()
    }
}

impl InstIDs {
    pub fn new() -> InstIDs {
        ::std::default::Default::default()
    }

    // repeated .InstanceID ids = 1;


    pub fn get_ids(&self) -> &[InstanceID] {
        &self.ids
    }
    pub fn clear_ids(&mut self) {
        self.ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_ids(&mut self, v: ::protobuf::RepeatedField<InstanceID>) {
        self.ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ids(&mut self) -> &mut ::protobuf::RepeatedField<InstanceID> {
        &mut self.ids
    }

    // Take field
    pub fn take_ids(&mut self) -> ::protobuf::RepeatedField<InstanceID> {
        ::std::mem::replace(&mut self.ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InstIDs {
    fn is_initialized(&self) -> bool {
        for v in &self.ids {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ids {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstIDs {
        InstIDs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceID>>(
                    "ids",
                    |m: &InstIDs| { &m.ids },
                    |m: &mut InstIDs| { &mut m.ids },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstIDs>(
                    "InstIDs",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstIDs {
        static mut instance: ::protobuf::lazy::Lazy<InstIDs> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstIDs,
        };
        unsafe {
            instance.get(InstIDs::new)
        }
    }
}

impl ::protobuf::Clear for InstIDs {
    fn clear(&mut self) {
        self.ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstIDs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstIDs {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instance {
    // message fields
    pub initial_deps: ::protobuf::SingularPtrField<InstIDs>,
    pub deps: ::protobuf::SingularPtrField<InstIDs>,
    pub deps_status: ::std::vec::Vec<InstanceStatus>,
    pub final_deps: ::protobuf::SingularPtrField<InstIDs>,
    pub status: InstanceStatus,
    pub cmds: ::protobuf::RepeatedField<super::command::Command>,
    pub ballot: ::protobuf::SingularPtrField<BallotNum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    // .InstIDs initial_deps = 1;


    pub fn get_initial_deps(&self) -> &InstIDs {
        self.initial_deps.as_ref().unwrap_or_else(|| InstIDs::default_instance())
    }
    pub fn clear_initial_deps(&mut self) {
        self.initial_deps.clear();
    }

    pub fn has_initial_deps(&self) -> bool {
        self.initial_deps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_deps(&mut self, v: InstIDs) {
        self.initial_deps = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_deps(&mut self) -> &mut InstIDs {
        if self.initial_deps.is_none() {
            self.initial_deps.set_default();
        }
        self.initial_deps.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_deps(&mut self) -> InstIDs {
        self.initial_deps.take().unwrap_or_else(|| InstIDs::new())
    }

    // .InstIDs deps = 2;


    pub fn get_deps(&self) -> &InstIDs {
        self.deps.as_ref().unwrap_or_else(|| InstIDs::default_instance())
    }
    pub fn clear_deps(&mut self) {
        self.deps.clear();
    }

    pub fn has_deps(&self) -> bool {
        self.deps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deps(&mut self, v: InstIDs) {
        self.deps = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deps(&mut self) -> &mut InstIDs {
        if self.deps.is_none() {
            self.deps.set_default();
        }
        self.deps.as_mut().unwrap()
    }

    // Take field
    pub fn take_deps(&mut self) -> InstIDs {
        self.deps.take().unwrap_or_else(|| InstIDs::new())
    }

    // repeated .InstanceStatus deps_status = 3;


    pub fn get_deps_status(&self) -> &[InstanceStatus] {
        &self.deps_status
    }
    pub fn clear_deps_status(&mut self) {
        self.deps_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_deps_status(&mut self, v: ::std::vec::Vec<InstanceStatus>) {
        self.deps_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deps_status(&mut self) -> &mut ::std::vec::Vec<InstanceStatus> {
        &mut self.deps_status
    }

    // Take field
    pub fn take_deps_status(&mut self) -> ::std::vec::Vec<InstanceStatus> {
        ::std::mem::replace(&mut self.deps_status, ::std::vec::Vec::new())
    }

    // .InstIDs final_deps = 4;


    pub fn get_final_deps(&self) -> &InstIDs {
        self.final_deps.as_ref().unwrap_or_else(|| InstIDs::default_instance())
    }
    pub fn clear_final_deps(&mut self) {
        self.final_deps.clear();
    }

    pub fn has_final_deps(&self) -> bool {
        self.final_deps.is_some()
    }

    // Param is passed by value, moved
    pub fn set_final_deps(&mut self, v: InstIDs) {
        self.final_deps = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_final_deps(&mut self) -> &mut InstIDs {
        if self.final_deps.is_none() {
            self.final_deps.set_default();
        }
        self.final_deps.as_mut().unwrap()
    }

    // Take field
    pub fn take_final_deps(&mut self) -> InstIDs {
        self.final_deps.take().unwrap_or_else(|| InstIDs::new())
    }

    // .InstanceStatus status = 21;


    pub fn get_status(&self) -> InstanceStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = InstanceStatus::NA;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: InstanceStatus) {
        self.status = v;
    }

    // repeated .Command cmds = 31;


    pub fn get_cmds(&self) -> &[super::command::Command] {
        &self.cmds
    }
    pub fn clear_cmds(&mut self) {
        self.cmds.clear();
    }

    // Param is passed by value, moved
    pub fn set_cmds(&mut self, v: ::protobuf::RepeatedField<super::command::Command>) {
        self.cmds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cmds(&mut self) -> &mut ::protobuf::RepeatedField<super::command::Command> {
        &mut self.cmds
    }

    // Take field
    pub fn take_cmds(&mut self) -> ::protobuf::RepeatedField<super::command::Command> {
        ::std::mem::replace(&mut self.cmds, ::protobuf::RepeatedField::new())
    }

    // .BallotNum ballot = 41;


    pub fn get_ballot(&self) -> &BallotNum {
        self.ballot.as_ref().unwrap_or_else(|| BallotNum::default_instance())
    }
    pub fn clear_ballot(&mut self) {
        self.ballot.clear();
    }

    pub fn has_ballot(&self) -> bool {
        self.ballot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ballot(&mut self, v: BallotNum) {
        self.ballot = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ballot(&mut self) -> &mut BallotNum {
        if self.ballot.is_none() {
            self.ballot.set_default();
        }
        self.ballot.as_mut().unwrap()
    }

    // Take field
    pub fn take_ballot(&mut self) -> BallotNum {
        self.ballot.take().unwrap_or_else(|| BallotNum::new())
    }
}

impl ::protobuf::Message for Instance {
    fn is_initialized(&self) -> bool {
        for v in &self.initial_deps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.final_deps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cmds {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ballot {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_deps)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deps)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.deps_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.final_deps)?;
                },
                21 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 21, &mut self.unknown_fields)?
                },
                31 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cmds)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ballot)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.initial_deps.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.deps.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.deps_status {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        if let Some(ref v) = self.final_deps.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.status != InstanceStatus::NA {
            my_size += ::protobuf::rt::enum_size(21, self.status);
        }
        for value in &self.cmds {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.ballot.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.initial_deps.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.deps.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.deps_status {
            os.write_enum(3, v.value())?;
        };
        if let Some(ref v) = self.final_deps.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.status != InstanceStatus::NA {
            os.write_enum(21, self.status.value())?;
        }
        for v in &self.cmds {
            os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.ballot.as_ref() {
            os.write_tag(41, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstIDs>>(
                    "initial_deps",
                    |m: &Instance| { &m.initial_deps },
                    |m: &mut Instance| { &mut m.initial_deps },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstIDs>>(
                    "deps",
                    |m: &Instance| { &m.deps },
                    |m: &mut Instance| { &mut m.deps },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstanceStatus>>(
                    "deps_status",
                    |m: &Instance| { &m.deps_status },
                    |m: &mut Instance| { &mut m.deps_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstIDs>>(
                    "final_deps",
                    |m: &Instance| { &m.final_deps },
                    |m: &mut Instance| { &mut m.final_deps },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstanceStatus>>(
                    "status",
                    |m: &Instance| { &m.status },
                    |m: &mut Instance| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::command::Command>>(
                    "cmds",
                    |m: &Instance| { &m.cmds },
                    |m: &mut Instance| { &mut m.cmds },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BallotNum>>(
                    "ballot",
                    |m: &Instance| { &m.ballot },
                    |m: &mut Instance| { &mut m.ballot },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Instance>(
                    "Instance",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Instance {
        static mut instance: ::protobuf::lazy::Lazy<Instance> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Instance,
        };
        unsafe {
            instance.get(Instance::new)
        }
    }
}

impl ::protobuf::Clear for Instance {
    fn clear(&mut self) {
        self.initial_deps.clear();
        self.deps.clear();
        self.deps_status.clear();
        self.final_deps.clear();
        self.status = InstanceStatus::NA;
        self.cmds.clear();
        self.ballot.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InstanceStatus {
    NA = 0,
    PreAccepted = 1,
    Accepted = 2,
    Committed = 3,
    Executed = 4,
}

impl ::protobuf::ProtobufEnum for InstanceStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InstanceStatus> {
        match value {
            0 => ::std::option::Option::Some(InstanceStatus::NA),
            1 => ::std::option::Option::Some(InstanceStatus::PreAccepted),
            2 => ::std::option::Option::Some(InstanceStatus::Accepted),
            3 => ::std::option::Option::Some(InstanceStatus::Committed),
            4 => ::std::option::Option::Some(InstanceStatus::Executed),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InstanceStatus] = &[
            InstanceStatus::NA,
            InstanceStatus::PreAccepted,
            InstanceStatus::Accepted,
            InstanceStatus::Committed,
            InstanceStatus::Executed,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("InstanceStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for InstanceStatus {
}

impl ::std::default::Default for InstanceStatus {
    fn default() -> Self {
        InstanceStatus::NA
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0einstance.proto\x1a\rcommand.proto\"=\n\nInstanceID\x12\x1d\n\nrepl\
    ica_id\x18\x01\x20\x01(\x03R\treplicaId\x12\x10\n\x03idx\x18\x02\x20\x01\
    (\x03R\x03idx\"R\n\tBallotNum\x12\x14\n\x05epoch\x18\x01\x20\x01(\x05R\
    \x05epoch\x12\x10\n\x03num\x18\x02\x20\x01(\x05R\x03num\x12\x1d\n\nrepli\
    ca_id\x18\x03\x20\x01(\x03R\treplicaId\"(\n\x07InstIDs\x12\x1d\n\x03ids\
    \x18\x01\x20\x03(\x0b2\x0b.InstanceIDR\x03ids\"\x9b\x02\n\x08Instance\
    \x12+\n\x0cinitial_deps\x18\x01\x20\x01(\x0b2\x08.InstIDsR\x0binitialDep\
    s\x12\x1c\n\x04deps\x18\x02\x20\x01(\x0b2\x08.InstIDsR\x04deps\x120\n\
    \x0bdeps_status\x18\x03\x20\x03(\x0e2\x0f.InstanceStatusR\ndepsStatus\
    \x12'\n\nfinal_deps\x18\x04\x20\x01(\x0b2\x08.InstIDsR\tfinalDeps\x12'\n\
    \x06status\x18\x15\x20\x01(\x0e2\x0f.InstanceStatusR\x06status\x12\x1c\n\
    \x04cmds\x18\x1f\x20\x03(\x0b2\x08.CommandR\x04cmds\x12\"\n\x06ballot\
    \x18)\x20\x01(\x0b2\n.BallotNumR\x06ballot*T\n\x0eInstanceStatus\x12\x06\
    \n\x02NA\x10\0\x12\x0f\n\x0bPreAccepted\x10\x01\x12\x0c\n\x08Accepted\
    \x10\x02\x12\r\n\tCommitted\x10\x03\x12\x0c\n\x08Executed\x10\x04b\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
