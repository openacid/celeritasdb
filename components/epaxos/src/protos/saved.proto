


message PrepareReq {
    int64 leader_id = 1;  // the replica owns the instance
    int64 replica_id = 2; // the replica who starts the explict prepare
    instance.InstanceId instance_id = 3;
    instance.BallotNum ballot = 4;
};

message PrepareReply {
    int64 acceptor_id = 1;
    int64 replica_id = 2; // the replica who starts the explict prepare
    instance.InstanceId instance_id = 3;
    // successful(true), or failed(false) in case ballot number of msg
    // smaller than that in instance
    bool ok = 4;
    instance.BallotNum ballot = 5;
    instance.Instance instance = 6;
};

message PreAcceptReq {
    int64 leader_id = 1;
    int64 replica_id = 2; // the same value with leader_id, weird!
    instance.InstanceId instance_id = 3;
    instance.Instance instance = 4;
    instance.BallotNum ballot = 5;
};

message PreAcceptReply {
    int64 replica_id = 1;
    instance.Instance instance = 2;
    bool ok = 3;
    instance.BallotNum ballot = 4;
    repeated instance.InstanceId committed_deps = 5;
};

// used in Paxos-Accept
message AcceptReq {
    int64 leader_id = 1;  // the replica who sends the msg
    int64 replica_id = 2; // the replica who starts the explicit_prepare or who starts the preaccept or who starts the try-preaccept
    instance.Instance instance = 3;
    instance.BallotNum ballot = 4;
    int32 count = 5;
};

message AcceptReply {
    int64 replica_id = 1;
    instance.InstanceId instance_id = 2;
    bool ok = 3;
    instance.BallotNum ballot = 4;
};

// used in commit phase
message CommitReq {
    int64 leader_id = 1;
    int64 replica_id = 2;
    instance.Instance instance = 3;
};

message CommitShort {
    int64 leader_id = 1;
    int64 replica_id = 2;
    instance.InstanceId instance_id = 3;
    int32 count = 4;

    int32 seq = 5;
    repeated instance.InstanceId deps = 6;
}

message TryPreAcceptReq {
    int64 leader_id = 1;
    int64 replica_id = 2;
    instance.InstanceId instance_id = 3;
    instance.BallotNum ballot = 4;
    instance.Instance instance = 5;
};

message TryPreAcceptReply {
    int64 acceptor_id = 1;
    int64 replica_id = 2;
    instance.InstanceId instance_id = 3;
    bool ok = 4;
    instance.BallotNum ballot = 5;
    int64 conflict_replica = 6;
    instance.InstanceId conflict_instance_id = 7;
    instance.InstanceStatus conflict_status = 8;
};


// command impl with oneof

message Cmd {
    oneof cmd {
        CmdGet get = 1;
        CmdSet set = 2;
        CmdIncr incr = 3;
    }
}

message CmdGet {
    Key key = 2;
}

message CmdSet {
    Key key = 2;
    Value value = 3;
}

message CmdIncr {
    Key key = 2;
    Value value = 3;
}

message Key {
    oneof key {
        int64 i64k = 1;
        bytes bytesk = 2;
    }
}

message Value {
    oneof value {
        int64 i64v = 1;
        bytes bytesv = 2;
    }
}
