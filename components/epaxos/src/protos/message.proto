syntax = "proto3";

package qpaxos;

import "command.proto";
import "errors.proto";
import "instance.proto";

enum RequestType {
    Prepare = 0;
    TryPreAccept = 1;
    PreAccept = 2;
    Accept = 3;
    Commit = 4;
};

// field id:
// 01~10: meta.
// 11~20: common fields.
// 21~30: replication irrelevant fields.
// 31~40: fast path related fields.
// 41~50: slow path related fields.
// 51~60: for commit.


message FastAcceptRequest {
    repeated Command     cmds           = 21;
    Deps               deps           = 32;
    repeated bool        deps_committed = 33;
}
message AcceptRequest {
    Deps deps = 32;
}
message CommitRequest {
    repeated Command     cmds           = 21;
    Deps               deps           = 32;
}
message PrepareRequest {
    // TODO prepare does not need cmds to find conflicting in our algorithm.
    //      need proof
    // repeated Command  cmds           = 21;
}

message ReplicateRequest {

    int64 to_replica_id    = 2;

    // Sender's ballot
    BallotNum ballot       = 12;
    InstanceId instance_id = 13;

    oneof phase {
        FastAcceptRequest fast    = 100;
        AcceptRequest     accept  = 101;
        CommitRequest     commit  = 102;
        PrepareRequest    prepare = 103;
    }
}

message FastAcceptReply {
    // deps_status describe what status a dependent instance is in.
    // Only `deps` needs these information in order to commit on fast-path.

    Deps              deps           = 32;
    repeated bool       deps_committed = 33;
}
message AcceptReply { }
message CommitReply { }
message PrepareReply {
    Deps              deps       = 32;
    bool                committed  = 51;
}

message ReplicateReply {

    QError     err         = 5;
    // The ballot stored on acceptor before handling a request.
    BallotNum  last_ballot = 11;
    InstanceId instance_id = 13;

    oneof phase {
        FastAcceptReply fast    = 100;
        AcceptReply     accept  = 101;
        CommitReply     commit  = 102;
        PrepareReply    prepare = 103;
    }
}
