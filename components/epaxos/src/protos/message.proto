syntax = "proto3";

package qpaxos;

import "command.proto";
import "errors.proto";
import "instance.proto";

enum RequestType {
    Prepare = 0;
    TryPreAccept = 1;
    PreAccept = 2;
    Accept = 3;
    Commit = 4;
};

// field id:
// 01~10: meta.
// 11~20: common fields.
// 21~30: replication irrelevant fields.
// 31~40: fast path related fields.
// 41~50: slow path related fields.
// 51~60: for commit.


message RequestCommon {
    int64 to_replica_id = 2;

    // Sender's ballot
    BallotNum ballot = 12;
    InstanceID instance_id = 13;
}
message FastAcceptRequest {
    RequestCommon cmn = 1;
    repeated Command     cmds           = 21;
    repeated InstanceID initial_deps   = 31;
    repeated bool                deps_committed = 33;
}
message AcceptRequest {
    RequestCommon cmn = 1;
    repeated InstanceID final_deps     = 41;
}
message CommitRequest {
    RequestCommon cmn = 1;
    repeated Command     cmds           = 21;
    repeated InstanceID final_deps     = 41;
}
message PrepareRequest {
    RequestCommon cmn = 1;
    // TODO prepare does not need cmds to find conflicting in our algorithm.
    //      need proof
    // repeated Command     cmds           = 21;
}


message ReplyCommon {
    // The ballot stored on acceptor before handling a request.
    BallotNum last_ballot = 11;
    InstanceID instance_id = 13;
    QError err = 14;
}
message FastAcceptReply {
    // deps_status describe what status a dependent instance is in.
    // Only `deps` needs these information in order to commit on fast-path.

    ReplyCommon cmn = 1;
    repeated InstanceID deps           = 32;
    repeated bool                deps_committed = 33;
}
message AcceptReply {
    ReplyCommon cmn = 1;
}
message CommitReply {
    ReplyCommon cmn = 1;
}
message PrepareReply {
    ReplyCommon cmn = 1;
    repeated InstanceID deps       = 32;
    repeated InstanceID final_deps = 41;
    bool                         committed  = 51;
}
